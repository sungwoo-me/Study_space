package kr.co.ict;

import java.util.ArrayList;
import java.util.List;
import java.sql.*;
public class UserDAO {

	// DB접속에 필요한 변수들을 아래 선언한다. 
	private String dbtype = "com.mysql.cj.jdbc.Driver";
	private String dburl = "jdbc:mysql://localhost:3306/jdbc_practice01";
	private String dbid = "root";
	private String dbpw = "mysql";
	
	// 생성할 때 자동으로 Class.forName()을 실행하게 만든다. 
	// 이것은 어떤 쿼리문을 실행해도 공통적으로 실행하는 부분 
	public UserDAO() {
		try {
			Class.forName(dbtype);
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	// user_list2.jsp 코드 로직을 대체 
	// user_list2.jsp에서 전체 유저 목록을 필요로 하기 때문에
	// 실행 결과로 List<UserVO>를 리턴해줘야 한다.
	// 역시 SELECT구문을 실핼할때에는 리턴자료가 필요하고
	// INSERT, DELETE , UPDATE구문을 실행할때는 리턴자료가 void 입니다. 
	public List<UserVo> getAllUserList(){
		//  Connection, PreparedStatement, ResultSet 을 선언한다. 
		ResultSet rs =  null ;
		Connection con  = null;
		PreparedStatement pstmt  = null ;
		
		// ArrayList<UserVO> 자료형을 이용해 한줄 한줄 단위로 여러 row를 저장한다.  \
		
		List<UserVo> userList = new ArrayList<>();
		
		try {
			con = DriverManager.getConnection(dburl , dbid , dbpw); 
			String sql = "SELECT * FROM userinfo";
			pstmt = con.prepareStatement(sql);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				String uName = rs.getString("uname");
				String uId = rs.getString("uid");
				String uPw = rs.getString("upw");
				String uEmail = rs.getString("uemail");
				UserVo userData = new UserVo(uName, uId, uPw, uEmail);
				userList.add(userData);  
			}
			
		}catch(Exception e){
			e.printStackTrace();
			
		}finally {
			try {
				con.close();
				pstmt.close();
				rs.close();
			}catch(SQLException se) {
				se.printStackTrace();
			}
		}
		return userList ;
	}
	
	// login_updata.jsp의 경우 로그인한 유저 한 명의 데이터만 DB에서 얻어 옵니다.
	// 따라서 , 그 한명으이 유저 데이터만을 이용해 SELECT 구문을 써야 합니다.
	// login_updata.jsp 상단의 sId 변수에 들어있는 유저명을 이용해 유저 데이터를 얻어옵니다. 
	
	public UserVo getUserData(String sId) {
		// 접속 로직은 getALLUserList()와 큰 차이가 없고 쿼리문만 좀 다릅니다. 
		
		// 1. Connection, PreparedStatement, ResultSet 변수 선언만 해주세요. 
		ResultSet rs =  null ;
		Connection con  = null;
		PreparedStatement pstmt  = null ;
		UserVo user = null ;		// 2. try 블럭 내부에서 DB연결을 해주세요. 필요한 URL ,ID, PW는 상단에 멤버변수로 이미 존재합니다.
		try {
			con = DriverManager.getConnection(dburl , dbid , dbpw); 
			String sql = "SELECT * FROM userinfo WHERE uid = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1,sId);
			
			
			// 3. 쿼리문을 날려서 rs에 DB에 가져온 정보를 받아주세요.

			rs = pstmt.executeQuery();
	
	
		
		
		
		// 4. UserVO변수를 선언해주시고, rs에 저장된 데이터를 UserVO에 담습니다.
			
			if(rs.next()) {
				String uName = rs.getString("uname");
				String uId = rs.getString("uid");
				String uPw = rs.getString("upw");
				String uEmail = rs.getString("uemail");
				user = new UserVo(uName, uId, uPw, uEmail);
			}
			
		// 5. catch, finally 블럭을 작성해주시고 finally에서 자원회수까지 마쳐주세요 
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				// .close() 는 무조건 try 블록 내부에 있어야 한다. 
				con.close();
				pstmt.close();
				rs.close();
			}catch(SQLException se) {
				se.printStackTrace();
			}
		}
		
		
		return user ;
	}
	

}
